name: Publish package to Lit ðŸ“¤
run-name: "âœ¨ Publishing to Lit, new update: ${{ github.job }}"

on:
  push:
    branches:
      - main

jobs:
  publish:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          # sudo apt update
          # sudo apt upgrade -y

          sudo apt install curl
          sudo apt install openssl
      
      - name: Set up luvi, lit, luvit
        run: |
          # make curl retry when there are HTTP 500 errors
          curl  -L https://github.com/luvit/lit/raw/master/get-lit.sh | sed 's/curl /curl --retry 5 --retry-max-time 30 /' | sh
      
      - name: Set up SSH keys for lit
        env:
          PRIVATE_KEY: ${{ secrets.ID_RSA }}
        run: |
          mkdir -p $HOME/.ssh
          printf "%s" "$PRIVATE_KEY" > $HOME/.ssh/id_rsa

      - name: Where is our HOME directory?
        run: |
          echo $HOME
      
      - name: Read package & release information
        id: package-info
        run: |
          script='
          local package_path = "package.lua"
          local release_notes_path = "Release Notes.md"
          
          local package = dofile(package_path)
          
          if not package then
              error("Failed to load package.lua")
          end
          
          local username = package.name:match("^[^/]+")
          local authorName = package.author and package.author.name or "numelon.com"
          local authorEmail = package.author and package.author.email or (username .. "@users.noreply.github.com")
          local packageId = package.name:match("^[^/]+/(.+)")
          local version = "v" .. package.version
          local includes = table.concat(package.files, "\n")
          
          local script = [[
          echo "username=]] .. username .. [[" >> $GITHUB_OUTPUT
          echo "name=]] .. authorName .. [[" >> $GITHUB_OUTPUT
          echo "email=]] .. authorEmail .. [[" >> $GITHUB_OUTPUT
          echo "packageid=]] .. packageId .. [[" >> $GITHUB_OUTPUT
          echo "version=]] .. version .. [[" >> $GITHUB_OUTPUT
          echo "includes=]] .. includes .. [[" >> $GITHUB_OUTPUT
          ]]
          
          os.execute(script)
          
          local release_notes = io.open(release_notes_path, "r")
          
          if not release_notes then
              error("Failed to open Release Notes.md")
          end
          
          local all_contents = release_notes:read("*a")
          release_notes:close()
          
          -- Escape double quotes in the contents
          all_contents = all_contents:gsub([["]], [[\\"]])
          
          local first_line = all_contents:match("^[^\n]+")
          local plain_title = first_line:gsub("^%s*#*%s*(.-)%s*$", "%1")
          
          local script = [[
          echo "releasenotes<<EOF
          ]] .. all_contents .. [[
          EOF" >> $GITHUB_OUTPUT
          echo "release_title="]] .. plain_title .. [[" >> $GITHUB_OUTPUT
          ]]
          
          os.execute(script)
          '
          ./luvit -e "$script"
      
      - name: Authenticate and publish to Lit
        run: |
          ./lit auth "${{ steps.package-info.outputs.username }}" "${{ steps.package-info.outputs.name }}" "${{ steps.package-info.outputs.email }}"
          ./lit publish .
          echo "Package ID: ${{ steps.package-info.outputs.packageid }}"
      
      - name: Create zip file for GitHub Release
        run: |
          zip -r release.zip ${{ steps.package-info.outputs.includes }}
        working-directory: ${{ github.workspace }}
      
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            ${{ github.workspace }}/release.zip
          token: ${{ secrets.GITHUB_TOKEN }}
          tag: ${{ steps.package-info.outputs.version }}
          title: ${{ steps.package-info.outputs.version }} - ${{ steps.package-info.outputs.release_title }}
          body: |
            ${{ steps.package-info.outputs.releasenotes }}
      
      - name: Cleanup (remove sensitive data)
        if: always()
        run: |
          rm -f $HOME/.ssh/id_rsa