name: Publish package to Lit ðŸ“¤
run-name: "âœ¨ Publishing to Lit, new update: ${{ github.ref }}"

on:
  push:
    branches:
      - main

jobs:
  publish:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          # sudo apt update
          # sudo apt upgrade -y

          sudo apt install curl
          sudo apt install openssl
      
      - name: Set up luvi, lit, luvit
        run: |
          # make curl retry when there are HTTP 500 errors
          curl  -L https://github.com/luvit/lit/raw/master/get-lit.sh | sed 's/curl /curl --retry 5 --retry-max-time 30 /' | sh
      
      - name: Set up SSH keys for lit
        env:
          PRIVATE_KEY: ${{ secrets.ID_RSA }}
        run: |
          mkdir -p $HOME/.ssh
          printf "%s" "$PRIVATE_KEY" > $HOME/.ssh/id_rsa

      - name: Where is our HOME directory?
        run: |
          echo $HOME
      
      - name: Read package & release information
        id: package-info
        run: |
          script='
          local package = dofile("package.lua")

          local username = package.name:match("^[^/]+")
          local authorName = package.author and package.author.name or "numelon.com"
          local authorEmail = package.author and package.author.email or (username .. "@users.noreply.github.com")
          local packageId = package.name:match("^[^/]+/(.+)")
          local version = "v" .. package.version
          local includes = table.concat(package.files, "\n")
          print("Processed")
          
          os.execute("echo \"username=" .. username .. "\" >> $GITHUB_OUTPUT")
          os.execute("echo \"name=" .. authorName .. "\" >> $GITHUB_OUTPUT")
          os.execute("echo \"email=" .. authorEmail .. "\" >> $GITHUB_OUTPUT")
          os.execute("echo \"packageid=" .. packageId .. "\" >> $GITHUB_OUTPUT")
          os.execute("echo \"version=" .. version .. "\" >> $GITHUB_OUTPUT")
          os.execute("echo \"includes=" .. includes .. "\" >> $GITHUB_OUTPUT")
          print("Processed basic")
          
          --[[local release_notes = io.open("Release Notes.md", "r")
          local all_contents = release_notes:read("*a")
          release_notes:close()
          print("Read")
          
          -- Escape double quotes in the contents
          all_contents = all_contents:gsub([["]], [[\\"]])
          print("gsub")
          
          -- Extract the first line and remove '#' and leading/trailing whitespace from the title
          local first_line = all_contents:match("^[^\n]+")
          local plain_title = first_line:gsub("^%s*#*%s*(.-)%s*$", "%1")
          print("extracted")
          
          print("echoing")
          os.execute("echo \"releasenotes=" .. all_contents .. "\" >> $GITHUB_OUTPUT")
          os.execute("echo \"release_title=" .. plain_title .. "\" >> $GITHUB_OUTPUT")
          print("echoed")]]
          '
          ./luvit -e "$script"
      
      - name: Authenticate and publish to Lit
        run: |
          ./lit auth "${{ steps.package-info.outputs.username }}" "${{ steps.package-info.outputs.name }}" "${{ steps.package-info.outputs.email }}"
          ./lit publish .
          echo "Package ID: ${{ steps.package-info.outputs.packageid }}"
      
      - name: Create zip file for GitHub Release
        run: |
          zip -r release.zip ${{ steps.package-info.outputs.includes }}
        working-directory: ${{ github.workspace }}
      
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            ${{ github.workspace }}/release.zip
          token: ${{ secrets.GITHUB_TOKEN }}
          tag: ${{ steps.package-info.outputs.version }}
          title: ${{ steps.package-info.outputs.version }} - Test Release #${{ steps.package-info.outputs.release_title }}
          body: |
            Test Release
            # ${{ steps.package-info.outputs.releasenotes }}
      
      - name: Cleanup (remove sensitive data)
        if: always()
        run: |
          rm -f $HOME/.ssh/id_rsa